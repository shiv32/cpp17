
Microcontroller code using C++.

---------------------------------------------------------------------------------------------------------
Fixed-Width Integer Types (from <cstdint> or <stdint.h>):
These are especially important in embedded systems to ensure precise control over the size of variables:

int8_t, uint8_t: 8-bit signed and unsigned integers.
int16_t, uint16_t: 16-bit signed and unsigned integers.
int32_t, uint32_t: 32-bit signed and unsigned integers.
int64_t, uint64_t: 64-bit signed and unsigned integers (used sparingly on smaller microcontrollers).
---------------------------------------------------------------------------------------------------------

UINT8_C is a macro defined in the C and C++ standard libraries, typically found in <cstdint> (C++) or <stdint.h> (C). 
It is used to define a constant of type uint8_t (an unsigned 8-bit integer).

The UINT8_C macro ensures that the literal constant is treated as a uint8_t type. 
This is particularly useful when working with fixed-width integer types across different platforms, 
where type sizes may vary.
-------------------------------------------------------------------------------------------------------

SimulIDE/Arduino setup -->

Note: OS is Ubuntu 18.04.6 LTS

1. Download SimulIDE 0.4.15 – older version from ->

https://simulide.com/p/downloads/

Download file will SimulIDE_0.4.15-SR10.AppImage

chmod +x SimulIDE_0.4.15-SR10.AppImage

run ->
sudo ./SimulIDE_0.4.15-SR10.AppImage

2. Download Arduino from -->

https://www.arduino.cc/en/software

go to Arduino IDE 1.8.19 

downloaded file will be "arduino-1.8.19-linux64.tar.xz"

extract it

3. Now run SimulIDE and make new .ino file to blink led and set compiler path below
by right click on file tab.

/home/xyz/Downloads/ardiuno-simulator/arduino-1.8.19-linux64/arduino-1.8.19

click compile button in SimulIDE

4. Now drag Arduino UNO from left pan and save it in a folder then run upload from editor tab and turn on the Arduino UNO
from tab.

5. If any error come restart/relaunch the SimulIDE.

Note: To zoom in/out Arduino UNO pic in SimulIDE, click on Arduino UNO pic after drag to main area and roll the mouse wheel down/up.

ref:https://www.hackster.io/patrick-fitzgerald2/setup-simulide-for-arduino-82694a

---------------------------------------------------------------------------------------------
avr-g++ setup ubuntu 18.04 -->

sudo apt update
sudo apt install -y build-essential
sudo apt install -y freeglut3 freeglut3-dev
sudo apt install -y gcc-avr avr-libc binutils-avr gdb-avr avrdude

or with arduino

sudo apt update
sudo apt install -y build-essential
sudo apt install gcc-avr binutils-avr avr-libc avrdude arduino arduino-core
sudo snap install arduino-cli
arduino-cli core install arduino:avr

Check -->
avr-g++ --version
o/p:
avr-g++ (GCC) 5.4.0

Package	                Description
gcc-avr	                C compiler for AVR
g++-avr	                C++ compiler for AVR
binutils-avr	        Tools (assembler, linker, objcopy)
avr-libc	        Standard C library (includes <util/delay.h>)
avrdude	                Uploader (flashes HEX files to AVR)


Upload Code to AVR Microcontroller (arduino)-->

avrdude -c arduino -p m328p -P /dev/ttyUSB0 -b 115200 -U flash:w:main.hex:i

Explanation:
-c arduino              → Use Arduino as ISP (for Arduino bootloader)
-p m328p                → Target ATmega328P (used in Arduino Uno)
-P /dev/ttyUSB0         → Port name (use ls /dev/tty* to find)
-b 115200               → Baud rate (for Arduino bootloader)
-U flash:w:main.hex:i   → Write main.hex to flash memory

In simulIDE direct upload the hex file by right click on ardiuno image -> load firmware 
then click on the power button in top menue to run simulation.
----------------------------------------------------------
SimAVR is a lightweight AVR simulator that allows you to test AVR programs without real hardware.

SimAVR Tested on "Ubuntu 20.04 LTS"

sudo apt update
sudo apt install -y simavr
simavr -h

send hex file to destination:
scp main.hex 192.168.56.30:/home/shiv/avr-test

run:
simavr -m atmega328p -f 16000000 main.hex

Output:
You will see uart_print in your programe in console if all is ok.
----------------------------------------------------------
SimAVR Tested on "Ubuntu 18.04.4 LTS"

Upgrade to GCC 9:

sudo add-apt-repository ppa:ubuntu-toolchain-r/test
sudo apt update
sudo apt install -y gcc-9 g++-9

Set GCC 9 as the default compiler:

sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 100
sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 100

Verify the upgrade:

gcc --version

It should now show GCC 9.x or newer.

-----------------------------------
Installing SimAVR

Now, proceed with installing AVR tools and SimAVR:

sudo apt update
sudo apt install -y build-essential
sudo apt install -y freeglut3 freeglut3-dev
sudo apt install -y gcc-avr avr-libc binutils-avr gdb-avr avrdude

git clone https://github.com/buserror/simavr.git
cd simavr
make -j$(nproc)
sudo make install

send hex file to destination:
scp main.hex 192.168.56.30:/home/shiv/avr-test

run:
simavr -m atmega328p -f 16000000 main.hex

Output:
You will see uart_print in your programe in console if all is ok.

Note: If you see the errors in make or install for simavr, ignore it
--------------------------------------------------------------------------------------------- 
Usefull Links -->

1.  Designing a HAL in C++
        https://blog.mbedded.ninja/programming/languages/c-plus-plus/designing-a-hal-in-cpp/

        git : https://github.com/yh-sb/mcu-cpp

2.  How to use C++ with STM32 HAL
        https://barenakedembedded.com/how-to-use-cpp-with-stm32-hal/

3.  STM32 vs Arduino
        https://www.orientdisplay.com/stm32-vs-arduino/

4.  C to C++: 3 Reasons to Migrate
        https://www.embeddedrelated.com/showarticle/1478.php
