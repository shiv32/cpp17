C++17 mini project implementing a Generic Cache System.

âœ… Design Patterns:
    Pattern	    Purpose
    Template	Cache for any Key, Value type
    Strategy	Swap eviction policies (e.g., FIFO, LRU)
    Singleton	Optional global cache (can disable if undesired)
    Decorator	Easily add logging (extension-ready)

--------------------------------------------------------------------------

ðŸš€ Real-World Usefulness
Speeds Up Data Access
    Caches reduce expensive data recomputation or slow I/O (e.g., DB queries, file reads, sensor polling).
    Use case: Caching live sensor data, stock prices, API responses.

Generic & Reusable
    By templating it, you can cache any data typeâ€”int, string, SensorReading, even complex structs.
    Works across different projects with minimal changes.

Memory Efficiency
    Combine with LRU or TTL strategies (you can add this) to control memory usage.

Thread-Safe Extension   
    Add mutexes for multithreading (C++17 supports std::shared_mutex).

Plugin System or Microservices
    Cache module can be plugged into other tools like:
        CLI microservice simulator
        Stock market simulator
        Game engine data (e.g., asset or AI behavior caching)

---------------------------------------------------------------------------

ðŸ“¦ Sample Use Cases
    Scenario	                        What Cache Stores
    IoT Sensor Monitoring System	    Latest temperature/humidity readings
    Stock Market Simulator	            Price history snapshots
    Game Engine	                        AI decisions, level data, or NPC states
    Compiler/Interpreter	            AST trees, symbol lookups
    API Gateway	                        Cached responses for performance boost