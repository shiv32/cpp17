/*

THREAD POOLS
    Instead of creating and deleting threads dynamically throughout your program’s lifetime, you can create a pool 
    of threads that can be used as needed. 
    This technique is often used in programs that want to handle some kind of event in a thread. 
    In most environments, the ideal number of threads is equal to the number of processing cores. 
    If there are more threads than cores, threads will have to be suspended to allow other threads to run, and this will ultimately add overhead. 
    Note that while the ideal number of threads is equal to the number of cores, this applies only in the case where the threads are compute bound and cannot block for any other reason, including I/O. 
    When threads can block, it is often appropriate to run more threads than there are cores. 
    Determining the optimal number of threads in such cases is hard, and may involve throughput measurements.

    Because not all processing is identical, it is not uncommon to have threads from a thread pool receive, as part of their input, a function object or lambda expression that represents the computation to be done.

    Because threads from a thread pool are pre-existing, it is much more efficient for the operating system to schedule a thread from the pool to run than it is to create one in response to an input.
    Furthermore, the use of a thread pool allows you to manage the number of threads that are created, so, depending on the platform, you may have just one thread or thousands of threads.

    Several libraries are available that implement thread pools, including Intel Threading Building Blocks (TBB), Microsoft Parallel Patterns Library (PPL), and so on. 
    It’s recommended to use such a library for your thread pools instead of writing your own implementation. 
    If you do want to implement a thread pool yourself, it can be done in a similar way to an object pool. 

*/